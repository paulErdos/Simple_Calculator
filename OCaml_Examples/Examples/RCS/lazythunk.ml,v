head	341.6;
access;
symbols;
locks;
comment	@; @;


341.6
date	2004.03.03.19.47.57;	author -;	state -;
branches;
next	341.5;

341.5
date	2004.03.03.18.41.33;	author -;	state -;
branches;
next	341.4;

341.4
date	2004.03.03.18.39.23;	author -;	state -;
branches;
next	341.3;

341.3
date	2004.03.03.18.37.01;	author -;	state -;
branches;
next	341.2;

341.2
date	2004.03.03.18.35.01;	author -;	state -;
branches;
next	341.1;

341.1
date	2004.03.02.23.53.39;	author -;	state -;
branches;
next	;


desc
@@


341.6
log
@-
@
text
@(* $Id: lazythunk.ml,v 341.5 2004-03-03 10:41:33-08 - - $ *)

open Printf

(* re-implementation of module Lazy *)

#load "camlp4o.cma";;
let lazyexpand _ expr = "(ref (Delay (fun () -> (" ^ expr ^ "))))";;
Quotation.add "lazy" (Quotation.ExStr lazyexpand);;

type 'a suspension =
    | Value of 'a
    | Excep of exn
    | Delay of (unit -> 'a)

type 'a thunk = 'a suspension ref

exception Thunk_cycle

let rec force thunk = match !thunk with
    | Delay delay -> (thunk := Excep Thunk_cycle;
                      try  let value = delay ()
                           in  (thunk := Value value; value)
                      with excep -> (thunk := Excep excep; raise excep))
    | Value value -> value
    | Excep excep -> raise excep

let (!?) = force

(* stream and lazy stuff *)

type 'a stream = End | Stream of 'a * 'a stream thunk

exception End_stream

let (@@::) hd tl = Stream (hd, tl)

let head = function
    | End            -> raise End_stream
    | Stream (hd, _) -> hd

let tail = function
    | End            -> raise End_stream
    | Stream (_, tl) -> !?tl

let rec take n stream = match n, stream with
    | _, End             -> End
    | n, _ when n <= 0   -> End
    | _, Stream (hd, tl) -> Stream (hd, <:lazy< (take (n - 1) !?tl)>>)

let rec drop n stream = match n, stream with
    | _, End             -> End
    | n, _ when n <= 0   -> stream
    | _, Stream (hd, tl) -> drop (n - 1) !?tl

let rec list_of_stream = function
    | End             -> []
    | Stream (hd, tl) -> hd :: list_of_stream !?tl

let rec iter fn1 = function
    | End             -> ()
    | Stream (hd, tl) -> (fn1 hd; iter fn1 !?tl)

let rec iter2 fn2 = function
    | End, _ -> ()
    | _, End -> ()
    | Stream (hd1, tl1), Stream (hd2, tl2)
             -> (fn2 hd1 hd2; iter2 fn2 !?tl1 !?tl2)

let rec iter3 fn3 = function
    | End, _, _ -> ()
    | _, End, _ -> ()
    | _, _, End -> ()
    | Stream (hd1, tl1), Stream (hd2, tl2), Stream (hd3, tl3)
                -> (fn3 hd1 hd2 hd3; iter3 fn3 !?tl1 !?tl2 !?tl3)

let rec zip fn = function
    | End, _ -> End
    | _, End -> End
    | Stream (hd1, tl1), Stream (hd2, tl2)
             -> Stream (fn hd1 hd2, <:lazy< (zip fn !?tl1 !?tl2)>>)

(* stuff that uses streams and Nums *)

let rec range head limit =
    if head > limit
    then End
    else let next = head + 1
         in  Stream (head, <:lazy< (range next limit)>>)

let naturals = range 0 max_int

let fac n =
    let rec fac' n m = match n with
        | 0 -> m
        | n -> fac' (n - 1) (n * m)
    in  if n < 0 then invalid_arg "fac"
                 else fac' n 1

let printfac n = printf "%d! = %d\n" n (fac n)

let printfacs n = iter printfac (take n naturals)

(* let fib = 0 : 1 : zip (+) fib (tail fib) *)

let fibstream =
    let rec fibstream0 = Stream (0, fibstream1)
        and fibstream1 = <:lazy< (Stream (1, fibstream2))>>
        and fibstream2 = <:lazy< (zip (+) fibstream0 !?fibstream1)>>
    in  fibstream0

let printfib n nfib nfib' =
    printf "fib(%3d) = %11d, %20.15f\n"
           n nfib (float_of_int nfib /. float_of_int nfib')

let printfibs n = iter3 printfib naturals
                                 (take n fibstream)
                                 (take n (drop 1 fibstream))

@


341.5
log
@-
@
text
@d1 1
a1 1
(* $Id: lazythunk.ml,v 341.4 2004-03-03 10:39:23-08 - - $ *)
d60 1
a60 1
let rec iter fn1 stream = match stream with
d64 1
a64 1
let rec iter2 fn2 stream1 stream2 = match stream1, stream2 with
d70 1
a70 1
let rec iter3 fn3 strm1 strm2 strm3 = match strm1, strm2, strm3 with
d75 1
a75 1
             -> (fn3 hd1 hd2 hd3; iter3 fn3 !?tl1 !?tl2 !?tl3)
d77 1
a77 1
let rec zip fn stream1 stream2 = match stream1, stream2 with
@


341.4
log
@-
@
text
@d1 1
a1 1
(* $Id: lazythunk.ml,v 341.3 2004-03-03 10:37:01-08 - - $ *)
d47 1
a48 1
    | _, End             -> End
d52 1
a53 1
    | _, End             -> End
@


341.3
log
@-
@
text
@d1 1
a1 1
(* $Id: lazythunk.ml,v 341.2 2004-03-03 10:35:01-08 - - $ *)
d38 1
a38 1
let head stream = match stream with
d42 1
a42 1
let tail stream = match stream with
d56 1
a56 1
let rec list_of_stream stream = match stream with
@


341.2
log
@-
@
text
@d1 1
a1 1
(* $Id: lazythunk.ml,v 341.1 2004/03/02 23:53:39 - - $ *)
d113 2
a114 2
    printf "fib(%3d) = %11d, %20.15f\n" n nfib
           (float_of_int nfib /. float_of_int nfib')
d117 2
a118 1
                  (take n fibstream) (take n (drop 1 fibstream))
@


341.1
log
@-
@
text
@d1 1
a1 1
(* $Id$ *)
d39 1
a39 1
    | End -> raise End_stream
d43 1
a43 1
    | End -> raise End_stream
d47 2
a48 2
    | n, _ when n <= 0 -> End
    | _, End -> End
d52 2
a53 1
    | n, _ when n <= 0 -> stream
d57 1
a57 1
    | End -> []
d61 1
a61 1
    | End -> ()
@
