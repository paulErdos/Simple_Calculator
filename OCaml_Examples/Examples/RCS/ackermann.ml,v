head	330.3;
access;
symbols;
locks;
comment	@; @;


330.3
date	2003.02.03.18.42.46;	author -;	state -;
branches;
next	330.2;

330.2
date	2003.01.03.23.03.14;	author -;	state -;
branches;
next	330.1;

330.1
date	2003.01.02.22.53.48;	author -;	state -;
branches;
next	329.2;

329.2
date	2002.12.20.19.48.54;	author -;	state -;
branches;
next	329.1;

329.1
date	2002.12.20.19.40.27;	author -;	state -;
branches;
next	;


desc
@@


330.3
log
@-
@
text
@(* $Id: ackermann.ml,v 330.2 2003-01-03 15:03:14-08 - - $ *)
(* Ackermann's Function *)

(* tuple version *)
let rec ackt = function
   | ( 0, 0, k ) -> k
   | ( 0, j, k ) -> ackt( 0, j - 1, k ) + 1
   | ( 1, 0, k ) -> 0
   | ( i, 0, k ) -> 1
   | ( i, j, k ) -> ackt( i - 1, ackt( i, j - 1, k), k )
   ;;

(* curried version *)
let rec ackc i j k = match (i, j) with
   | ( 0, 0 ) -> k
   | ( 0, j ) -> (ackc 0 (j - 1) k) + 1
   | ( 1, 0 ) -> 0
   | ( i, 0 ) -> 1
   | ( i, j ) -> ackc (i - 1) (ackc i (j - 1) k) k
   ;;
   
(*
 * Prove that:
 *         ack 0 j k = k + j
 *         ack 1 j k = k * j
 *         ack 2 j k = k ** j
 * What is ack 3 j k ?
 *)
let add = ackc 0;;
let mul = ackc 1;;
let exp = ackc 2;;
let ttt = ackc 3;;

let inc = add 1;;
let dbl = mul 2;;
let sqr x = mul x x;;

(*
* More usual version of Ackermann's function,
* using only two parameters.
*)
let rec ak m n = match (m, n) with
    | (0, n) -> n + 1
    | (m, 0) -> ak (m - 1) 1
    | (m, n) -> ak (m - 1) (ak m (n - 1))
    ;;
@


330.2
log
@-
@
text
@d1 1
a1 1
(* $Id: ackermann.ml,v 330.1 2003-01-02 14:53:48-08 - - $ *)
d42 1
a42 1
let rec A m n = match (m, n) with
d44 3
a46 3
    | (m, 0) -> A (m - 1) 1
    | (m, n) -> A (m - 1) (A m (n - 1))
;;
@


330.1
log
@-
@
text
@d1 1
a1 1
(* $Id: ackermann.ml,v 329.2 2002-12-20 11:48:54-08 - - $ *)
d38 9
@


329.2
log
@-
@
text
@d1 1
a1 1
(* $Id: ackermann.sml,v 321.1 2002-02-07 12:58:23-08 - - $ *)
d4 2
a5 1
let rec ack = function
d7 1
a7 1
   | ( 0, j, k ) -> ack( 0, j - 1, k ) + 1
d10 1
a10 1
   | ( i, j, k ) -> ack( i - 1, ack( i, j - 1, k), k )
d13 9
d24 4
a27 5
 *    ack( 0, j, k ) is k + j
 *    ack( 1, j, k ) is k * j
 *    ack( 2, j, k ) is k ** j
 *
 * What is ack( 3, j, k )?
d29 8
@


329.1
log
@-
@
text
@d5 6
a10 6
   | 0 0 k -> k
   | 0 j k -> (ack 0 (j - 1) k) + 1
   | 1 0 k -> 0
   | i 0 k -> 1
   | i j k -> ack (i - 1) (ack i (j - 1) k) k
  ;
@
